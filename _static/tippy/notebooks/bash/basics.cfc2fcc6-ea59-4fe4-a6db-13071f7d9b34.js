selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\"]": "<p>In computing, a <b>shebang</b> is the character sequence consisting of the characters number sign and exclamation mark at the beginning of a script. It is also called <b>sharp-exclamation</b>, <b>sha-bang</b>, <b>hashbang</b>, <b>pound-bang</b>, or <b>hash-pling</b>.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Shebang_(Unix)#\"]": "<p>In computing, a <b>shebang</b> is the character sequence consisting of the characters number sign and exclamation mark at the beginning of a script. It is also called <b>sharp-exclamation</b>, <b>sha-bang</b>, <b>hashbang</b>, <b>pound-bang</b>, or <b>hash-pling</b>.</p>", "a[href=\"#conditional-execution\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Conditional Execution<a class=\"headerlink\" href=\"#conditional-execution\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#comments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Comments<a class=\"headerlink\" href=\"#comments\" title=\"Permalink to this heading\">#</a></h2><p>Comments start with <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">shebang</span></code> is also a comment.</p>", "a[href=\"#variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Variables<a class=\"headerlink\" href=\"#variables\" title=\"Permalink to this heading\">#</a></h2><p>Declaring a variable looks like this:</p>", "a[href=\"#command\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Command<a class=\"headerlink\" href=\"#command\" title=\"Permalink to this heading\">#</a></h2><p>Each command starts on a new line, or after a semicolon:</p>", "a[href=\"#standard-in-out-err\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Standard In/Out/Err<a class=\"headerlink\" href=\"#standard-in-out-err\" title=\"Permalink to this heading\">#</a></h2><p>Results (stdout) of the previous command can be passed as input (stdin) to the next command using a pipe <code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code>. Commands chained in this way are called a \u201cpipeline\u201d, and are run concurrently. The <code class=\"docutils literal notranslate\"><span class=\"pre\">grep</span></code> command filters the input with provided patterns. That\u2019s how we can list .txt files in the current directory:</p>", "a[href=\"#ampersand\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Ampersand<a class=\"headerlink\" href=\"#ampersand\" title=\"Permalink to this heading\">#</a></h1><p>A single ampersand <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> after a command runs it in the background. A background command\u2019s output is printed to the terminal, but it cannot read from the input.</p>", "a[href=\"#built-in-variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Built-in Variables<a class=\"headerlink\" href=\"#built-in-variables\" title=\"Permalink to this heading\">#</a></h2><p>There are some useful built-in variables, like:</p>", "a[href=\"#arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Arrays<a class=\"headerlink\" href=\"#arrays\" title=\"Permalink to this heading\">#</a></h2><p>Declare an array with 6 elements:</p>", "a[href=\"#expressions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Expressions<a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this heading\">#</a></h2><p>Expressions are denoted with the following format:</p>", "a[href=\"#bash-basics\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Bash Basics<a class=\"headerlink\" href=\"#bash-basics\" title=\"Permalink to this heading\">#</a></h1><p>First line of the script is the shebang which tells the system how to execute the script:</p><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\">Shebang</a></p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
