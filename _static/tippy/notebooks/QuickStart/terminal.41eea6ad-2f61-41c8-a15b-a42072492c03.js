selector_to_html = {"a[href=\"#terminal-shell-bash\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1. </span>Terminal, Shell, &amp; Bash<a class=\"headerlink\" href=\"#terminal-shell-bash\" title=\"Permalink to this heading\">#</a></h1><h2><span class=\"section-number\">1.1. </span>Terminal<a class=\"headerlink\" href=\"#terminal\" title=\"Permalink to this heading\">#</a></h2><p>Example of the <code class=\"docutils literal notranslate\"><span class=\"pre\">terminal</span></code> on a Macbook (<a class=\"reference internal\" href=\"#terminal-header\"><span class=\"std std-numref\">Fig. 1.1</span></a>). The line you are working on is noted with the <code class=\"docutils literal notranslate\"><span class=\"pre\">$</span></code>. The format of this line is: computer name, <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code> , username, and then <code class=\"docutils literal notranslate\"><span class=\"pre\">$</span></code> . <code class=\"docutils literal notranslate\"><span class=\"pre\">Bash</span></code> commands are typed by line, and ran by hitting the <code class=\"docutils literal notranslate\"><span class=\"pre\">[enter]</span></code> key.</p><p><strong><em>Why do we start here?</em></strong>\nThe command line is a tool that everyone uses in computational research.</p>", "a[href=\"#shell\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.2. </span>Shell<a class=\"headerlink\" href=\"#shell\" title=\"Permalink to this heading\">#</a></h2><h3><span class=\"section-number\">1.2.1. </span>Shells Provides Structure<a class=\"headerlink\" href=\"#shells-provides-structure\" title=\"Permalink to this heading\">#</a></h3><p>When the user opens <code class=\"docutils literal notranslate\"><span class=\"pre\">terminal</span></code>, a <a class=\"reference internal\" href=\"../../glossary.html#term-shell\"><span class=\"xref std std-term\">shell</span></a> session is immediately started</p>", "a[href=\"#terminal-app\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.1.2. </span>Terminal App<a class=\"headerlink\" href=\"#terminal-app\" title=\"Permalink to this heading\">#</a></h3><p>You can find the terminal by:</p>", "a[href=\"#terminal-is-just-90-keyboard\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.1.1. </span>Terminal is just 90% Keyboard<a class=\"headerlink\" href=\"#terminal-is-just-90-keyboard\" title=\"Permalink to this heading\">#</a></h3><p>Graphical Interfaces</p>", "a[href=\"#terminal-header\"]": "<figure class=\"align-center\" id=\"terminal-header\">\n<img alt=\"https://raw.githubusercontent.com/van-richard/CodingNotes/main/_static/gif/terminal-header.gif\" src=\"https://raw.githubusercontent.com/van-richard/CodingNotes/main/_static/gif/terminal-header.gif\"/>\n<figcaption>\n<p><span class=\"caption-number\">Fig. 1.1 </span><span class=\"caption-text\">Command line on MacOS <code class=\"docutils literal notranslate\"><span class=\"pre\">terminal</span></code>, where, (1) <code class=\"docutils literal notranslate\"><span class=\"pre\">echo</span></code> will return <code class=\"docutils literal notranslate\"><span class=\"pre\">\"[</span></code>some text<code class=\"docutils literal notranslate\"><span class=\"pre\">]\"</span></code> as an output, (2) <code class=\"docutils literal notranslate\"><span class=\"pre\">echo</span></code> to output \u201c2 + 2\u201d, the <code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code> (pipe) takes this as input for the next command, <code class=\"docutils literal notranslate\"><span class=\"pre\">bc</span> <span class=\"pre\">-l</span></code> (calculator), (3) <code class=\"docutils literal notranslate\"><span class=\"pre\">echo</span></code> prints the variable, <code class=\"docutils literal notranslate\"><span class=\"pre\">$SHELL</span></code>, which points to the program <code class=\"docutils literal notranslate\"><span class=\"pre\">/bin/bash</span></code>, and (4) cowboy.</span><a class=\"headerlink\" href=\"#terminal-header\" title=\"Permalink to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#shells-provides-structure\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.2.1. </span>Shells Provides Structure<a class=\"headerlink\" href=\"#shells-provides-structure\" title=\"Permalink to this heading\">#</a></h3><p>When the user opens <code class=\"docutils literal notranslate\"><span class=\"pre\">terminal</span></code>, a <a class=\"reference internal\" href=\"../../glossary.html#term-shell\"><span class=\"xref std std-term\">shell</span></a> session is immediately started</p>", "a[href=\"#terminal\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">1.1. </span>Terminal<a class=\"headerlink\" href=\"#terminal\" title=\"Permalink to this heading\">#</a></h2><p>Example of the <code class=\"docutils literal notranslate\"><span class=\"pre\">terminal</span></code> on a Macbook (<a class=\"reference internal\" href=\"#terminal-header\"><span class=\"std std-numref\">Fig. 1.1</span></a>). The line you are working on is noted with the <code class=\"docutils literal notranslate\"><span class=\"pre\">$</span></code>. The format of this line is: computer name, <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code> , username, and then <code class=\"docutils literal notranslate\"><span class=\"pre\">$</span></code> . <code class=\"docutils literal notranslate\"><span class=\"pre\">Bash</span></code> commands are typed by line, and ran by hitting the <code class=\"docutils literal notranslate\"><span class=\"pre\">[enter]</span></code> key.</p><p><strong><em>Why do we start here?</em></strong>\nThe command line is a tool that everyone uses in computational research.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
